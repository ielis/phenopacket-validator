package org.phenopackets.schema.validator.core;import com.google.common.collect.ImmutableList;import org.phenopackets.schema.v1.PhenoPacket;import org.phenopackets.schema.v1.core.*;/** * This class offers static methods for creating PhenoPacket parts for testing. */public class TestExamples {    public static final OntologyClass MALE = ontologyClass("PATO:0000384", "male");    public static final OntologyClass FEMALE = ontologyClass("PATO:0000383", "female");    public static final OntologyClass CHILDHOOD_ONSET = ontologyClass("HP:0011463", "Childhood onset");    public static final OntologyClass ADULT_ONSET = ontologyClass("HP:0003581", "Adult onset");    private TestExamples() {        // private no-op    }    /**     * @return     */    public static MetaData createValidMetadata() {        return MetaData.newBuilder()                .addResources(Resource.newBuilder()                        .setId("hp")                        .setName("human phenotype ontology")                        .setNamespacePrefix("HP")                        .setIriPrefix("http://purl.obolibrary.org/obo/HP_")                        .setUrl("http://purl.obolibrary.org/obo/hp.owl")                        .setVersion("2018-03-08")                        .build())                .addResources(Resource.newBuilder()                        .setId("pato")                        .setName("Phenotype And Trait Ontology")                        .setNamespacePrefix("PATO")                        .setIriPrefix("http://purl.obolibrary.org/obo/PATO_")                        .setUrl("http://purl.obolibrary.org/obo/pato.owl")                        .setVersion("2018-03-28")                        .build())                .addResources(Resource.newBuilder()                        .setId("geno")                        .setName("Genotype Ontology")                        .setNamespacePrefix("GENO")                        .setIriPrefix("http://purl.obolibrary.org/obo/GENO_")                        .setUrl("http://purl.obolibrary.org/obo/geno.owl")                        .setVersion("19-03-2018")                        .build())                .setCreatedBy("Example clinician")                .build();    }    /**     * @return {@link Phenotype} of spherocytosis (<code>HP:0004444</code>) with childhood onset (<code>HP:0011463</code>).     */    public static Phenotype spherocytosisWithChildhoodOnset() {        return Phenotype.newBuilder()                .setType(ontologyClass("HP:0004444", "Spherocytosis"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();    }    /**     * @return {@link Phenotype} of poikilocytosis (<code>HP:0004447</code>) with childhood onset (<code>HP:0011463</code>).     */    public static Phenotype poikilocytosisWithChildhoodOnset() {        return Phenotype.newBuilder()                .setType(ontologyClass("HP:0004447", "Poikilocytosis"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();    }    /**     * @return {@link Phenotype} of anemia (<code>HP:0001903</code>) with childhood onset (<code>HP:0011463</code>).     */    public static Phenotype anemiaWithChildhoodOnset() {        return Phenotype.newBuilder()                .setType(ontologyClass("HP:0001903", "Anemia"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();    }    /**     * @return {@link Phenotype} of hepatosplenomegaly (<code>HP:0001433</code>) with adult onset (<code>HP:0003581</code>).     */    public static Phenotype hepatosplenomegalyWithAdultOnset() {        return Phenotype.newBuilder()                .setType(ontologyClass("HP:0001433", "Hepatosplenomegaly"))                .setClassOfOnset(ADULT_ONSET)                .build();    }    /**     * @return Phenotype of Peripheral axonal degeneration with childhood onset. An obsolete term id     * <code>HP:0006876</code> is used instead of the current term id <code>HP:0000764</code>     */    public static Phenotype obsoletePeripheralAxonalDegenerationWithChildhoodOnset() {        return Phenotype.newBuilder()                .setType(ontologyClass("HP:0006876", "Peripheral axonal degeneration"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();    }    /**     * convenience function for creating an OntologyClass object.     */    private static OntologyClass ontologyClass(String id, String label) {        return OntologyClass.newBuilder()                .setId(id)                .setLabel(label)                .build();    }    /**     * Example phenopacket -- we still need to develop this for testing.     */    public PhenoPacket spherocytosisExample() {        final String PROBAND_ID = "PROBAND#1";        Phenotype spherocytosis = Phenotype.newBuilder()                .setType(ontologyClass("HP:0004444", "Spherocytosis"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();        Phenotype jaundice = Phenotype.newBuilder()                .setType(ontologyClass("HP:0000952", "Jaundice"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();        Phenotype splenomegaly = Phenotype.newBuilder()                .setType(ontologyClass("HP:0001744", "Splenomegaly"))                .setClassOfOnset(CHILDHOOD_ONSET)                .build();        Phenotype notHepatomegaly = Phenotype.newBuilder()                .setType(ontologyClass("HP:0002240", "Hepatomegaly"))                .setNegated(true)                .build();        Phenotype reticulocytosis = Phenotype.newBuilder()                .setType(ontologyClass("HP:0001923", "Reticulocytosis"))                .build();        Variant ANK1_variant = Variant.newBuilder()                .setHgvsAllele(HgvsAllele.newBuilder()                        .setId("ANK1_VARIANT_ID")                        .setHgvs("NM_001142446.1:c.5620C>T")                        .build())                .setGenotype(ontologyClass("GENO:0000135", "heterozygous"))                .build();        Individual proband = Individual.newBuilder()                .setSex(Sex.FEMALE)                .setId(PROBAND_ID)                .setAgeAtCollection(Age.newBuilder().setAge("P27Y3M").build())                .build();        return PhenoPacket.newBuilder()                .setSubject(proband)                .addAllVariants(ImmutableList.of(ANK1_variant))                .addPhenotypes(spherocytosis)                .addPhenotypes(jaundice)                .addPhenotypes(splenomegaly)                .addPhenotypes(notHepatomegaly)                .addPhenotypes(reticulocytosis)                .setMetaData(TestExamples.createValidMetadata())                .build();    }}